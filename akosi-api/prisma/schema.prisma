// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Email {
  id      String @id @default(uuid()) @db.Char(36)
  address String @unique @map(name: "address") @db.VarChar(255)

  activities EmailActivityLog[]
  users      UserEmail[]

  @@index([id], name: "idx_email_id")
  @@index([address], name: "idx_emails_address")
  @@map("emails")
}

model EmailActivityLog {
  id          Int      @id @default(autoincrement())
  emailId     String   @map(name: "email_id") @db.Char(36)
  activityId  Int      @map(name: "activity_id") @db.SmallInt
  data        Json?    @db.Json
  createdDate DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "created_date") @db.Timestamp()

  email Email @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId], name: "idx_emailactivitylogs_emailid")
  @@map("email_activity_logs")
}

model User {
  id             String   @id @default(uuid()) @db.Char(36)
  username       String   @unique @map(name: "user_name") @db.VarChar(255)
  passwordHash   String   @map(name: "password_hash") @db.VarChar(255)
  createdDate    DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "created_date") @db.Timestamp()
  lastUpdateDate DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "last_updated_date") @db.Timestamp()

  activities UserActivityLog[]
  emails     UserEmail[]
  profiles   UserProfile[]

  @@index([id], name: "idx_users_id")
  @@index([username], name: "idx_users_username")
  @@map("users")
}

model UserEmail {
  userId           String    @map(name: "user_id") @db.Char(36)
  emailId          String    @map(name: "email_id") @db.Char(36)
  verifiedDate     DateTime? @map(name: "verified_date")
  verificationCode String    @map(name: "vcode") @db.VarChar(10)

  user        User          @relation(fields: [userId], references: [id])
  Email       Email         @relation(fields: [emailId], references: [id])
  UserProfile UserProfile[]

  @@id([userId, emailId])
  @@map("user_emails")
}

model UserActivityLog {
  id          Int      @id @default(autoincrement())
  userId      String   @map(name: "user_id") @db.Char(36)
  activityId  Int      @map(name: "activity_id") @db.SmallInt
  data        Json?    @db.Json
  createdDate DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "created_date") @db.Timestamp()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_useractivitylogs_userid")
  @@map("user_activity_logs")
}

model UserProfile {
  id             String   @id @default(uuid()) @db.Char(36)
  userId         String   @map(name: "user_id") @db.Char(36)
  isPrimary      Boolean  @map(name: "is_primary") @db.Bit(1)
  givenName      String   @map(name: "given_name") @db.VarChar(255)
  middleName     String?  @map(name: "middle_name") @db.VarChar(255)
  surname        String?  @map(name: "surname") @db.VarChar(255)
  patronymicName String?  @map(name: "patronymic_name") @db.VarChar(255)
  honorificTitle String?  @map(name: "honorific_title") @db.VarChar(255)
  nameSuffix     String?  @map(name: "name_suffix") @db.VarChar(255)
  createdDate    DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "created_date") @db.Timestamp()
  lastUpdateDate DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map(name: "last_updated_date") @db.Timestamp()
  primaryEmailId String?  @unique @map(name: "primary_email_id") @db.Char(36)

  primaryEmail UserEmail? @relation(fields: [userId, primaryEmailId], references: [userId, emailId])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_userprofiles_userid")
  @@map("user_profiles")
}
